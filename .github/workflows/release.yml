name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag Git (v3.0.7, v4.0.0, etc.). Laisser vide pour utiliser la version du package.json"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  CSC_IDENTITY_AUTO_DISCOVERY: "false" # Emp√™che electron-builder de chercher un certificat macOS

jobs:
  build-and-publish:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # r√©cup√®re aussi les tags pour electron-builder

      - name: Setup Node 20 + cache npm
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: D√©finir la version de l'application
        id: set_version
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            # Supprimer le pr√©fixe 'v' si pr√©sent (ex: v1.0.0 -> 1.0.0)
            INPUT_TAG="${{ github.event.inputs.tag }}"
            VERSION="${INPUT_TAG#v}"
            echo "üè∑Ô∏è Version sp√©cifi√©e via input: $VERSION"
            
            # Mettre √† jour le package.json et package-lock.json
            npm version "$VERSION" --no-git-tag-version
            
            echo "‚úÖ package.json mis √† jour avec la version $VERSION"
          else
            # Utiliser la version existante si aucun tag n'est fourni
            VERSION=$(node -p "require('./package.json').version")
            echo "üì¶ Utilisation de la version existante du package.json: $VERSION"
          fi
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: G√©n√©rer les ic√¥nes pour l'application
        run: npm run generate-icons

      - name: V√©rifier que les ic√¥nes ont √©t√© g√©n√©r√©es
        shell: bash
        run: |
          echo "üîç V√©rification des ic√¥nes g√©n√©r√©es..."
          if [[ -f "build/icon.ico" ]]; then
            echo "‚úÖ Windows icon (icon.ico) trouv√©"
            ls -la build/icon.ico
          else
            echo "‚ùå Erreur: Windows icon (icon.ico) manquant"
            exit 1
          fi
          
          if [[ -f "build/icon.icns" ]]; then
            echo "‚úÖ macOS icon (icon.icns) trouv√©"
            ls -la build/icon.icns
          else
            echo "‚ùå Erreur: macOS icon (icon.icns) manquant"
            exit 1
          fi
          
          echo "üéâ Toutes les ic√¥nes sont pr√©sentes !"

      - name: V√©rifier les variables d'environnement Supabase
        shell: bash
        run: |
          if [[ "$VITE_SUPABASE_URL" == VITE_SUPABASE_URL* ]]; then
            echo "::error title=Secret VITE_SUPABASE_URL mal configur√©::La valeur du secret ne doit pas commencer par 'VITE_SUPABASE_URL='."
            exit 1
          fi
          if [[ -z "$VITE_SUPABASE_URL" ]]; then
            echo "::error title=Secret VITE_SUPABASE_URL manquant::Le secret est vide ou n'a pas √©t√© d√©fini dans les param√®tres du d√©p√¥t."
            exit 1
          fi
          if [[ "$VITE_SUPABASE_ANON_KEY" == VITE_SUPABASE_ANON_KEY* ]]; then
            echo "::error title=Secret VITE_SUPABASE_ANON_KEY mal configur√©::La valeur du secret ne doit pas commencer par 'VITE_SUPABASE_ANON_KEY='."
            exit 1
          fi
          if [[ -z "$VITE_SUPABASE_ANON_KEY" ]]; then
            echo "::error title=Secret VITE_SUPABASE_ANON_KEY manquant::Le secret est vide ou n'a pas √©t√© d√©fini dans les param√®tres du d√©p√¥t."
            exit 1
          fi
          echo "‚úÖ Secrets Supabase semblent corrects."

      - name: Build / Release avec electron-builder
        uses: samuelmeuli/action-electron-builder@v1
        env:
          NODE_ENV: production
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          args: ${{ matrix.os == 'windows-latest' && 'nsis --x64 --publish always' || 'dmg zip --x64 --arm64 --publish always' }}

      - name: Upload des artefacts (facultatif)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "packages-${{ runner.os }}"
          path: |
            release/*.dmg
            release/*.exe
