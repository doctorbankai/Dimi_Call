name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag Git (v3.0.7, v4.0.0, etc.). Laisser vide pour utiliser la version du package.json"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  CSC_IDENTITY_AUTO_DISCOVERY: "false" # Emp√™che electron-builder de chercher un certificat macOS

jobs:
  build-and-publish:
    strategy:
      fail-fast: false  # Ne pas annuler les autres jobs si un √©choue
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # r√©cup√®re aussi les tags pour electron-builder

      - name: Setup Node 20 + cache npm
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: D√©finir la version de l'application
        id: set_version
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            # Supprimer le pr√©fixe 'v' si pr√©sent (ex: v1.0.0 -> 1.0.0)
            INPUT_TAG="${{ github.event.inputs.tag }}"
            VERSION="${INPUT_TAG#v}"
            echo "üè∑Ô∏è Version sp√©cifi√©e via input: $VERSION"
            
            # V√©rifier la version actuelle
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "üì¶ Version actuelle: $CURRENT_VERSION"
            
            if [[ "$VERSION" != "$CURRENT_VERSION" ]]; then
              # Mettre √† jour le package.json et package-lock.json seulement si diff√©rent
              npm version "$VERSION" --no-git-tag-version
              echo "‚úÖ package.json mis √† jour de $CURRENT_VERSION vers $VERSION"
            else
              echo "‚ÑπÔ∏è Version identique ($VERSION), pas de mise √† jour n√©cessaire"
            fi
          else
            # Utiliser la version existante si aucun tag n'est fourni
            VERSION=$(node -p "require('./package.json').version")
            echo "üì¶ Utilisation de la version existante du package.json: $VERSION"
          fi
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: V√©rifier l'image source pour les ic√¥nes
        shell: bash
        run: |
          echo "üîç V√©rification de l'image source..."
          if [[ -f "DDD.png" ]]; then
            echo "‚úÖ Image source DDD.png trouv√©e"
            ls -la DDD.png
          else
            echo "‚ùå Erreur: Image source DDD.png manquante"
            exit 1
          fi

      - name: G√©n√©rer les ic√¥nes pour l'application
        continue-on-error: true
        shell: bash
        run: |
          echo "üõ†Ô∏è G√©n√©ration des ic√¥nes..."
          npm run generate-icons || echo "‚ö†Ô∏è G√©n√©ration d'ic√¥nes √©chou√©e, utilisation des ic√¥nes existantes"
          echo "‚úÖ √âtape de g√©n√©ration termin√©e"

      - name: V√©rifier que les ic√¥nes ont √©t√© g√©n√©r√©es
        shell: bash
        run: |
          echo "üîç V√©rification des ic√¥nes g√©n√©r√©es..."
          echo "üìÅ Contenu du dossier build/:"
          ls -la build/ || true
          
          if [[ -f "build/icon.ico" ]]; then
            echo "‚úÖ Windows icon (icon.ico) trouv√©"
            ls -la build/icon.ico
          else
            echo "‚ùå Erreur: Windows icon (icon.ico) manquant"
            echo "üìÅ Structure compl√®te du dossier build/:"
            find build/ -type f -name "*.ico" -o -name "*.icns" -o -name "*.png" | head -20 || true
            exit 1
          fi
          
          if [[ -f "build/icon.icns" ]]; then
            echo "‚úÖ macOS icon (icon.icns) trouv√©"
            ls -la build/icon.icns
          else
            echo "‚ùå Erreur: macOS icon (icon.icns) manquant"
            echo "üìÅ Structure compl√®te du dossier build/:"
            find build/ -type f -name "*.ico" -o -name "*.icns" -o -name "*.png" | head -20 || true
            exit 1
          fi
          
          echo "üéâ Toutes les ic√¥nes sont pr√©sentes !"

      - name: V√©rifier les variables d'environnement Supabase
        shell: bash
        run: |
          echo "üîç V√©rification des secrets Supabase..."
          if [[ "$VITE_SUPABASE_URL" == VITE_SUPABASE_URL* ]]; then
            echo "::warning title=Secret VITE_SUPABASE_URL mal configur√©::La valeur du secret ne doit pas commencer par 'VITE_SUPABASE_URL='."
          fi
          if [[ -z "$VITE_SUPABASE_URL" ]]; then
            echo "::warning title=Secret VITE_SUPABASE_URL manquant::Le secret est vide ou n'a pas √©t√© d√©fini dans les param√®tres du d√©p√¥t."
          fi
          if [[ "$VITE_SUPABASE_ANON_KEY" == VITE_SUPABASE_ANON_KEY* ]]; then
            echo "::warning title=Secret VITE_SUPABASE_ANON_KEY mal configur√©::La valeur du secret ne doit pas commencer par 'VITE_SUPABASE_ANON_KEY='."
          fi
          if [[ -z "$VITE_SUPABASE_ANON_KEY" ]]; then
            echo "::warning title=Secret VITE_SUPABASE_ANON_KEY manquant::Le secret est vide ou n'a pas √©t√© d√©fini dans les param√®tres du d√©p√¥t."
          fi
          echo "‚ÑπÔ∏è V√©rification Supabase termin√©e (les warnings ne bloquent pas le build)"

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: V√©rifier que le build Vite a r√©ussi
        shell: bash
        run: |
          echo "üîç V√©rification du build Vite..."
          if [[ -f "dist/main/main.js" ]]; then
            echo "‚úÖ Main process construit: dist/main/main.js"
          else
            echo "‚ùå Main process manquant: dist/main/main.js"
            exit 1
          fi
          if [[ -f "dist/preload/preload.mjs" ]]; then
            echo "‚úÖ Preload script construit: dist/preload/preload.mjs"
          else
            echo "‚ùå Preload script manquant: dist/preload/preload.mjs"
            exit 1
          fi
          if [[ -f "dist/renderer/index.html" ]]; then
            echo "‚úÖ Renderer construit: dist/renderer/index.html"
          else
            echo "‚ùå Renderer manquant: dist/renderer/index.html"
            exit 1
          fi
          echo "üéâ Build Vite v√©rifi√© avec succ√®s !"

      - name: Build & Publish Windows
        if: matrix.os == 'windows-latest'
        run: npx electron-builder --win --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production

      - name: Build & Publish macOS
        if: matrix.os == 'macos-latest'
        run: npx electron-builder --mac --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production

      - name: Debug - Lister les fichiers g√©n√©r√©s
        if: always()
        shell: bash
        run: |
          echo "üìÅ Contenu du dossier release/ :"
          ls -la release/ || echo "‚ùå Dossier release/ introuvable"
          echo ""
          echo "üìÅ Contenu du dossier dist/ :"
          ls -la dist/ || echo "‚ùå Dossier dist/ introuvable"
          echo ""
          echo "üìÅ Structure compl√®te :"
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.msi" 2>/dev/null | head -10 || echo "‚ùå Aucun fichier de distribution trouv√©"

      - name: Upload des artefacts Windows
        if: matrix.os == 'windows-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: "packages-Windows"
          path: |
            release/*.exe
            release/*.zip
            release/*.msi
          if-no-files-found: warn

      - name: Upload des artefacts macOS
        if: matrix.os == 'macos-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: "packages-macOS"
          path: |
            release/*.dmg
            release/*.zip
          if-no-files-found: warn

